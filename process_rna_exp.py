"""
open each rna file in data_dir; extract 'rna_exp_column' (column 1); convert to numpy array; save numpy array as a new file with the same name but .npy extension 

"""

import os
import sys
import codecs
import random
import fnmatch
import argparse
import numpy  as np
import pandas as pd

from classi.constants  import *

DEBUG   = 1

a = random.choice( range(200,255) )
b = random.choice( range(50,225) )
c = random.choice( range(50,225) )
BB="\033[38;2;{:};{:};{:}m".format( a,b,c )

#====================================================================================================================================================
def main(args):

  files_reviewed_count        = 0
  cumulative_rna_results = 0
  
  data_dir                 = args.data_dir
  rna_file_suffix          = args.rna_file_suffix  
  rna_file_reduced_suffix  = args.rna_file_reduced_suffix
  rna_exp_column           = args.rna_exp_column
  rna_numpy_filename       = args.rna_numpy_filename
  use_unfiltered_data      = args.use_unfiltered_data
  skip_rna_preprocessing    = args.skip_rna_preprocessing
  
  if  skip_rna_preprocessing =='True':
    print( f"{PINK}REDUCE_FPKM_UQ_FILES:   INFO: '{CYAN}skip_rna_preprocessing{RESET}{ORANGE}' flag = {MIKADO}{skip_rna_preprocessing}{RESET}{ORANGE}. Processing of raw RNA-Seq files will be performed, and '{MAGENTA}{rna_numpy_filename}{RESET}{ORANGE}' files will NOT be generated. {RESET}" )
    print( f"{PINK}REDUCE_FPKM_UQ_FILES:   INFO: 'This may be intentional on your part: the required files may alreay exist, and you may be using this flag to avoid repeatedly generating the same (gene filtered) files. {RESET}" )
    return
  
  if (DEBUG>99):
    print ( f"PROCESS_RNA_EXP:        INFO: data directory                        = {MAGENTA}'{data_dir}'{RESET}",                  flush=True )
    print ( f"PROCESS_RNA_EXP:        INFO: RNA-Seq file suffix                   = {MAGENTA}{rna_file_reduced_suffix}{RESET}",     flush=True )
    print ( f"PROCESS_RNA_EXP:        INFO: RNA-Seq class (subtype) column number = {MAGENTA}{rna_exp_column}{RESET}",              flush=True )
    print ( f"PROCESS_RNA_EXP:        INFO: RNA-Seq file name                     = {MAGENTA}'{rna_numpy_filename};{RESET}",        flush=True )

  if use_unfiltered_data == True: 
    pattern = f"{rna_file_suffix}"                                                                       # no filtering was performed in the previous step. Look for file name without '_reduced' suffix   
    sep='\t'
  else:
    pattern = f"*{rna_file_reduced_suffix}"                                                              # file ending with "_reduced", generated by 'process_rna_exp.py' in the previous step
    sep=','
    

  if (DEBUG>0):
    print ( f"PROCESS_RNA_EXP:        INFO: will look recursively under:            {MAGENTA}'{data_dir}'{RESET} for files with the TCGA RNA-Seq suffix, that is {BB}{pattern}{RESET}",  flush=True ) 
           
  walker = os.walk(data_dir)
  for root, __, files in walker:
    
    for f in files:
    
      current_file    = os.path.join( root, f)
  
      if (DEBUG>99):
        print ( f"PROCESS_RNA_EXP:        INFO: (current_file)                     {BB}{current_file}{RESET}",                flush=True )  

      if (DEBUG>99):
        print ( f"PROCESS_RNA_EXP:        INFO: pattern                          = {BB}{pattern}{RESET}",                     flush=True )
  
      # Handle RNA data
      if fnmatch.fnmatch( f, pattern  ):                                                                   # if found ...
   
        rna_results_file_found   =1
        cumulative_rna_results  +=1  
        
        if (DEBUG>2): 
          print ( f"PROCESS_RNA_EXP:        INFO: (match !)                          {BB}{current_file}{RESET}    \r\033[220Ccumulative match count       = {ARYLIDE}{cumulative_rna_results}{RESET}",  flush=True )
                  
        rna_npy_file          = os.path.join( root, rna_numpy_filename )                                   # rna.npy
        
        if (DEBUG>99): 
          print ( f"PROCESS_RNA_EXP:        INFO: (rna_npy_file)                   = {BB}{rna_npy_file}{RESET}",                flush=True )  

        rna_expression_column = pd.read_csv(current_file, usecols=[rna_exp_column], sep=sep, header=None )               # rna_exp_column=1
        
        if DEBUG>2:
          v = np.transpose( rna_expression_column[0:20])
          print ( f"PROCESS_RNA_EXP: median = {MIKADO}{np.median(v):6.1f}{RESET}" )
          pd.set_option('display.float_format', lambda x: '%12.1f' % x)
          print ( f"PROCESS_RNA_EXP: rna_expression_column (first 20 entries) = \n{GREEN if np.median(v) > 200 else RED}{v}{RESET}" )
        
        rna = rna_expression_column.to_numpy()

        if DEBUG>999:
          print ( f"PROCESS_RNA_EXP: rna.shape                                   = {CYAN}{rna.shape}{RESET}",                 flush=True  )
        if DEBUG>999:
          print ( f"PROCESS_RNA_EXP: rna                                         = {CYAN}{np.transpose(rna[0:50])}{RESET}" )
              
        
        np.save(rna_npy_file, rna)                                                                         # rna.npy

      files_reviewed_count += 1

      if (DEBUG>0):
        if files_reviewed_count % 50==0:
          print ( f"PROCESS_RNA_EXP:        INFO: {MIKADO}{files_reviewed_count}{RESET} files reviewed, of which {MIKADO}{cumulative_rna_results}{RESET} TCGA format RNA-Seq files found. Numpy versions made and stored for these {MIKADO}{cumulative_rna_results}{RESET} RNA-Seq files{RESET}",  flush=True )
          print ( "\033[2A",  flush=True )

  if (DEBUG>0):                                                                                          # this will show the final count
    print ( f"PROCESS_RNA_EXP:        INFO: {MIKADO}{files_reviewed_count}{RESET} files reviewed, of which {MIKADO}{cumulative_rna_results}{RESET} TCGA format RNA-Seq files found. Numpy versions made and stored for these {MIKADO}{cumulative_rna_results}{RESET} RNA-Seq files{RESET}",  flush=True )
    print ( "\033[2A",  flush=True )

  if (DEBUG>0):
    print ( "\033[1B",  flush=True )

      
#====================================================================================================================================================
      
if __name__ == '__main__':

  def str2bool(v):
      if isinstance(v, bool):
          return v
      if v.lower() in ('yes', 'true', 't', 'y', '1'):
          return True
      elif v.lower() in ('no', 'false', 'f', 'n', '0'):
          return False
      else:
          raise argparse.ArgumentTypeError('Boolean value expected for this input parameter')
  
  
  p = argparse.ArgumentParser()

  p.add_argument('--data_dir',                type=str, default="/home/peter/git/pipeline/working_data")
  p.add_argument('--rna_file_suffix',         type=str, default='*FPKM-UQ.txt')
  p.add_argument('--rna_file_reduced_suffix', type=str, default='_reduced')
  p.add_argument('--rna_exp_column',          type=int, default=1)
  p.add_argument('--rna_numpy_filename',      type=str, default="rna.npy")
  p.add_argument('--use_unfiltered_data',     type=str2bool, nargs='?', const=True, default=True, help="If true, don't filter the genes, but rather use all of them")
  p.add_argument('--skip_rna_preprocessing',  type=str2bool, nargs='?', const=False, default=False, help="If true, don't preprocess RNA-Seq files")
  
  args, _ = p.parse_known_args()

  main(args)
      
