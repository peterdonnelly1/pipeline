"""
open each rna file in data_dir; extract 'rna_exp_column' (column 1); convert to numpy array; save numpy array as a new file with the same name but .npy extension 

"""

import os
import sys
import codecs
import random
import fnmatch
import argparse
import numpy  as np
import pandas as pd

WHITE='\033[37;1m'
PURPLE='\033[35;1m'
DIM_WHITE='\033[37;2m'
DULL_WHITE='\033[38;2;140;140;140m'
CYAN='\033[36;1m'
MIKADO='\033[38;2;255;196;12m'
AZURE='\033[38;2;0;127;255m'
AMETHYST='\033[38;2;153;102;204m'
CHARTREUSE='\033[38;2;223;255;0m'
MAGENTA='\033[38;2;255;0;255m'
YELLOW='\033[38;2;255;255;0m'
DULL_YELLOW='\033[38;2;179;179;0m'
ARYLIDE='\033[38;2;233;214;107m'
BLEU='\033[38;2;49;140;231m'
DULL_BLUE='\033[38;2;0;102;204m'
RED='\033[38;2;255;0;0m'
PINK='\033[38;2;255;192;203m'
BITTER_SWEET='\033[38;2;254;111;94m'
PALE_RED='\033[31m'
DARK_RED='\033[38;2;120;0;0m'
ORANGE='\033[38;2;255;103;0m'
PALE_ORANGE='\033[38;2;127;63;0m'
GOLD='\033[38;2;255;215;0m'
GREEN='\033[38;2;19;136;8m'
BRIGHT_GREEN='\033[38;2;102;255;0m'
CARRIBEAN_GREEN='\033[38;2;0;204;153m'
PALE_GREEN='\033[32m'

BOLD='\033[1m'
ITALICS='\033[3m'
UNDER='\033[4m'
BLINK='\033[5m'
RESET='\033[m'

CLEAR_LINE='\033[0K'
UP_ARROW='\u25B2'
DOWN_ARROW='\u25BC'
SAVE_CURSOR='\033[s'
RESTORE_CURSOR='\033[u'

FAIL    = 0
SUCCESS = 1
DEBUG   = 1

a = random.choice( range(200,255) )
b = random.choice( range(50,225) )
c = random.choice( range(50,225) )
BB="\033[38;2;{:};{:};{:}m".format( a,b,c )

#====================================================================================================================================================
def main(args):

  cumulative_rna_results = 0
  
  data_dir                 = args.data_dir
  rna_file_suffix          = args.rna_file_suffix  
  rna_file_reduced_suffix  = args.rna_file_reduced_suffix
  rna_exp_column           = args.rna_exp_column
  rna_numpy_filename       = args.rna_numpy_filename
  use_unfiltered_data      = args.use_unfiltered_data  
  
  if (DEBUG>0):
    print ( "PROCESS_RNA_EXP:        INFO: args.data_dir                   = {:}{:}{:}".format( BB, data_dir,                 RESET ),  flush=True )
    print ( "PROCESS_RNA_EXP:        INFO: args.rna_file_reduced_suffix    = {:}{:}{:}".format( BB, rna_file_reduced_suffix , RESET ),  flush=True )
    print ( "PROCESS_RNA_EXP:        INFO: args.rna_exp_column             = {:}{:}{:}".format( BB, rna_exp_column,           RESET ),  flush=True )
    print ( "PROCESS_RNA_EXP:        INFO: args.rna_numpy_filename         = {:}{:}{:}".format( BB, rna_numpy_filename,       RESET ),  flush=True )

    if use_unfiltered_data == True: 
      pattern = f"{rna_file_suffix}"                                                                       # no filtering was performed in the previous step. Look for file name without '_reduced' suffix   
      sep='\t'
    else:
      pattern = f"*{rna_file_reduced_suffix}"                                                              # file ending with "_reduced", generated by 'process_rna_exp.py' in the previous step
      sep=','
      

  if (DEBUG>0):
    print ( "PROCESS_RNA_EXP:        INFO: will look recursively under:     {:}'{:}'{:} for files with the TCGA RNA-Seq suffix. i.e. {:}{:}{:}".format( BB, data_dir, RESET, BB, pattern, RESET ),  flush=True ) 
           
  walker = os.walk(data_dir)
  for root, __, files in walker:
    
    for f in files:
    
      current_file    = os.path.join( root, f)
  
      if (DEBUG>99):
        print ( "PROCESS_RNA_EXP:        INFO: (current_file)                    \033[34m{:}\033[m".format(   current_file          ),  flush=True )  

      if (DEBUG>99):
        print ( f"PROCESS_RNA_EXP:        INFO: pattern                          = {BB}{pattern}{RESET}",  flush=True )
  
      # Handle RNA data
      if fnmatch.fnmatch( f, pattern  ):                                                                   # if found ...
   
        rna_results_file_found   =1
        cumulative_rna_results  +=1  
        
        if (DEBUG>2): 
          print ( f"PROCESS_RNA_EXP:        INFO: (match !)                         {ARYLIDE}{current_file}{RESET}    \r\033[220Ccumulative match count = {ARYLIDE}{cumulative_rna_results}{RESET}",  flush=True )
                  
        rna_npy_file          = os.path.join( root, rna_numpy_filename )                                   # rna.npy
        
        if (DEBUG>99): 
          print ( "PROCESS_RNA_EXP:        INFO: (rna_npy_file)                   = {:}{:}{:}".format( BB, rna_npy_file, RESET ),  flush=True )  

        rna_expression_column = pd.read_csv(current_file, usecols=[rna_exp_column], sep=sep, header=None )               # rna_exp_column=1
        
        if DEBUG>2:
          v = np.transpose( rna_expression_column[0:20])
          print ( f"PROCESS_RNA_EXP: median = {MIKADO}{np.median(v):6.1f}{RESET}" )
          pd.set_option('display.float_format', lambda x: '%12.1f' % x)
          print ( f"PROCESS_RNA_EXP: rna_expression_column (first 20 entries) = \n{GREEN if np.median(v) > 200 else RED}{v}{RESET}" )
        
        rna = rna_expression_column.to_numpy()

        if DEBUG>9:
          print ( f"PROCESS_RNA_EXP: rna.shape                                = {CYAN}{rna.shape}{RESET}" )
        if DEBUG>99:
          print ( f"PROCESS_RNA_EXP: rna                                      = {CYAN}{np.transpose(rna[0:50])}{RESET}" )
              
        
        np.save(rna_npy_file, rna)                                                                         # rna.npy

  if (DEBUG>0): 
    print ( "PROCESS_RNA_EXP:        INFO:                                  {:}{:}{:}{:}    \r\033[185Ccumulative match count = {:}{:}".format( BB, current_file, RESET, BB, cumulative_rna_results, RESET ),  flush=True )

      
#====================================================================================================================================================
      
if __name__ == '__main__':

  def str2bool(v):
      if isinstance(v, bool):
          return v
      if v.lower() in ('yes', 'true', 't', 'y', '1'):
          return True
      elif v.lower() in ('no', 'false', 'f', 'n', '0'):
          return False
      else:
          raise argparse.ArgumentTypeError('Boolean value expected for this input parameter')
  
  
  p = argparse.ArgumentParser()

  p.add_argument('--data_dir',                type=str, default="/home/peter/git/pipeline/dataset")
  p.add_argument('--rna_file_suffix',         type=str, default='*FPKM-UQ.txt')
  p.add_argument('--rna_file_reduced_suffix', type=str, default='_reduced')
  p.add_argument('--rna_exp_column',          type=int, default=1)
  p.add_argument('--rna_numpy_filename',      type=str, default="rna.npy")
  p.add_argument('--use_unfiltered_data',     type=str2bool, nargs='?', const=True, default=True, help="If true, don't filter the genes, but rather use all of them")
  
  args, _ = p.parse_known_args()

  main(args)
      
